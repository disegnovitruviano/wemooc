/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.WorkflowedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the Competence service. Represents a row in the &quot;Lms_Competence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.lms.model.impl.CompetenceModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.lms.model.impl.CompetenceImpl}.
 * </p>
 *
 * @author TLS
 * @see Competence
 * @see com.liferay.lms.model.impl.CompetenceImpl
 * @see com.liferay.lms.model.impl.CompetenceModelImpl
 * @generated
 */
public interface CompetenceModel extends BaseModel<Competence>, WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a competence model instance should use the {@link Competence} interface instead.
	 */

	/**
	 * Returns the primary key of this competence.
	 *
	 * @return the primary key of this competence
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this competence.
	 *
	 * @param primaryKey the primary key of this competence
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the uuid of this competence.
	 *
	 * @return the uuid of this competence
	 */
	@AutoEscape
	public String getUuid();

	/**
	 * Sets the uuid of this competence.
	 *
	 * @param uuid the uuid of this competence
	 */
	public void setUuid(String uuid);

	/**
	 * Returns the competence ID of this competence.
	 *
	 * @return the competence ID of this competence
	 */
	public long getCompetenceId();

	/**
	 * Sets the competence ID of this competence.
	 *
	 * @param competenceId the competence ID of this competence
	 */
	public void setCompetenceId(long competenceId);

	/**
	 * Returns the company ID of this competence.
	 *
	 * @return the company ID of this competence
	 */
	public long getCompanyId();

	/**
	 * Sets the company ID of this competence.
	 *
	 * @param companyId the company ID of this competence
	 */
	public void setCompanyId(long companyId);

	/**
	 * Returns the group ID of this competence.
	 *
	 * @return the group ID of this competence
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this competence.
	 *
	 * @param groupId the group ID of this competence
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the user ID of this competence.
	 *
	 * @return the user ID of this competence
	 */
	public long getUserId();

	/**
	 * Sets the user ID of this competence.
	 *
	 * @param userId the user ID of this competence
	 */
	public void setUserId(long userId);

	/**
	 * Returns the user uuid of this competence.
	 *
	 * @return the user uuid of this competence
	 * @throws SystemException if a system exception occurred
	 */
	public String getUserUuid() throws SystemException;

	/**
	 * Sets the user uuid of this competence.
	 *
	 * @param userUuid the user uuid of this competence
	 */
	public void setUserUuid(String userUuid);

	/**
	 * Returns the status of this competence.
	 *
	 * @return the status of this competence
	 */
	public int getStatus();

	/**
	 * Sets the status of this competence.
	 *
	 * @param status the status of this competence
	 */
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this competence.
	 *
	 * @return the status by user ID of this competence
	 */
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this competence.
	 *
	 * @param statusByUserId the status by user ID of this competence
	 */
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this competence.
	 *
	 * @return the status by user uuid of this competence
	 * @throws SystemException if a system exception occurred
	 */
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this competence.
	 *
	 * @param statusByUserUuid the status by user uuid of this competence
	 */
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this competence.
	 *
	 * @return the status by user name of this competence
	 */
	@AutoEscape
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this competence.
	 *
	 * @param statusByUserName the status by user name of this competence
	 */
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this competence.
	 *
	 * @return the status date of this competence
	 */
	public Date getStatusDate();

	/**
	 * Sets the status date of this competence.
	 *
	 * @param statusDate the status date of this competence
	 */
	public void setStatusDate(Date statusDate);

	/**
	 * Returns the title of this competence.
	 *
	 * @return the title of this competence
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this competence in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this competence
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this competence in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this competence. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this competence in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this competence
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this competence in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this competence
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this competence.
	 *
	 * @return the locales and localized titles of this competence
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this competence.
	 *
	 * @param title the title of this competence
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this competence in the language.
	 *
	 * @param title the localized title of this competence
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this competence in the language, and sets the default locale.
	 *
	 * @param title the localized title of this competence
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this competence from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this competence
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this competence from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this competence
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the description of this competence.
	 *
	 * @return the description of this competence
	 */
	public String getDescription();

	/**
	 * Returns the localized description of this competence in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized description of this competence
	 */
	@AutoEscape
	public String getDescription(Locale locale);

	/**
	 * Returns the localized description of this competence in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this competence. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDescription(Locale locale, boolean useDefault);

	/**
	 * Returns the localized description of this competence in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized description of this competence
	 */
	@AutoEscape
	public String getDescription(String languageId);

	/**
	 * Returns the localized description of this competence in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized description of this competence
	 */
	@AutoEscape
	public String getDescription(String languageId, boolean useDefault);

	@AutoEscape
	public String getDescriptionCurrentLanguageId();

	@AutoEscape
	public String getDescriptionCurrentValue();

	/**
	 * Returns a map of the locales and localized descriptions of this competence.
	 *
	 * @return the locales and localized descriptions of this competence
	 */
	public Map<Locale, String> getDescriptionMap();

	/**
	 * Sets the description of this competence.
	 *
	 * @param description the description of this competence
	 */
	public void setDescription(String description);

	/**
	 * Sets the localized description of this competence in the language.
	 *
	 * @param description the localized description of this competence
	 * @param locale the locale of the language
	 */
	public void setDescription(String description, Locale locale);

	/**
	 * Sets the localized description of this competence in the language, and sets the default locale.
	 *
	 * @param description the localized description of this competence
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDescription(String description, Locale locale,
		Locale defaultLocale);

	public void setDescriptionCurrentLanguageId(String languageId);

	/**
	 * Sets the localized descriptions of this competence from the map of locales and localized descriptions.
	 *
	 * @param descriptionMap the locales and localized descriptions of this competence
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap);

	/**
	 * Sets the localized descriptions of this competence from the map of locales and localized descriptions, and sets the default locale.
	 *
	 * @param descriptionMap the locales and localized descriptions of this competence
	 * @param defaultLocale the default locale
	 */
	public void setDescriptionMap(Map<Locale, String> descriptionMap,
		Locale defaultLocale);

	/**
	 * Returns the page of this competence.
	 *
	 * @return the page of this competence
	 */
	@AutoEscape
	public String getPage();

	/**
	 * Sets the page of this competence.
	 *
	 * @param page the page of this competence
	 */
	public void setPage(String page);

	/**
	 * Returns the generate certificate of this competence.
	 *
	 * @return the generate certificate of this competence
	 */
	public boolean getGenerateCertificate();

	/**
	 * Returns <code>true</code> if this competence is generate certificate.
	 *
	 * @return <code>true</code> if this competence is generate certificate; <code>false</code> otherwise
	 */
	public boolean isGenerateCertificate();

	/**
	 * Sets whether this competence is generate certificate.
	 *
	 * @param generateCertificate the generate certificate of this competence
	 */
	public void setGenerateCertificate(boolean generateCertificate);

	/**
	 * Returns the diploma template of this competence.
	 *
	 * @return the diploma template of this competence
	 */
	public String getDiplomaTemplate();

	/**
	 * Returns the localized diploma template of this competence in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized diploma template of this competence
	 */
	@AutoEscape
	public String getDiplomaTemplate(Locale locale);

	/**
	 * Returns the localized diploma template of this competence in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized diploma template of this competence. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getDiplomaTemplate(Locale locale, boolean useDefault);

	/**
	 * Returns the localized diploma template of this competence in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized diploma template of this competence
	 */
	@AutoEscape
	public String getDiplomaTemplate(String languageId);

	/**
	 * Returns the localized diploma template of this competence in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized diploma template of this competence
	 */
	@AutoEscape
	public String getDiplomaTemplate(String languageId, boolean useDefault);

	@AutoEscape
	public String getDiplomaTemplateCurrentLanguageId();

	@AutoEscape
	public String getDiplomaTemplateCurrentValue();

	/**
	 * Returns a map of the locales and localized diploma templates of this competence.
	 *
	 * @return the locales and localized diploma templates of this competence
	 */
	public Map<Locale, String> getDiplomaTemplateMap();

	/**
	 * Sets the diploma template of this competence.
	 *
	 * @param diplomaTemplate the diploma template of this competence
	 */
	public void setDiplomaTemplate(String diplomaTemplate);

	/**
	 * Sets the localized diploma template of this competence in the language.
	 *
	 * @param diplomaTemplate the localized diploma template of this competence
	 * @param locale the locale of the language
	 */
	public void setDiplomaTemplate(String diplomaTemplate, Locale locale);

	/**
	 * Sets the localized diploma template of this competence in the language, and sets the default locale.
	 *
	 * @param diplomaTemplate the localized diploma template of this competence
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setDiplomaTemplate(String diplomaTemplate, Locale locale,
		Locale defaultLocale);

	public void setDiplomaTemplateCurrentLanguageId(String languageId);

	/**
	 * Sets the localized diploma templates of this competence from the map of locales and localized diploma templates.
	 *
	 * @param diplomaTemplateMap the locales and localized diploma templates of this competence
	 */
	public void setDiplomaTemplateMap(Map<Locale, String> diplomaTemplateMap);

	/**
	 * Sets the localized diploma templates of this competence from the map of locales and localized diploma templates, and sets the default locale.
	 *
	 * @param diplomaTemplateMap the locales and localized diploma templates of this competence
	 * @param defaultLocale the default locale
	 */
	public void setDiplomaTemplateMap(Map<Locale, String> diplomaTemplateMap,
		Locale defaultLocale);

	/**
	 * @deprecated Renamed to {@link #isApproved()}
	 */
	public boolean getApproved();

	/**
	 * Returns <code>true</code> if this competence is approved.
	 *
	 * @return <code>true</code> if this competence is approved; <code>false</code> otherwise
	 */
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this competence is denied.
	 *
	 * @return <code>true</code> if this competence is denied; <code>false</code> otherwise
	 */
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this competence is a draft.
	 *
	 * @return <code>true</code> if this competence is a draft; <code>false</code> otherwise
	 */
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this competence is expired.
	 *
	 * @return <code>true</code> if this competence is expired; <code>false</code> otherwise
	 */
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this competence is inactive.
	 *
	 * @return <code>true</code> if this competence is inactive; <code>false</code> otherwise
	 */
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this competence is incomplete.
	 *
	 * @return <code>true</code> if this competence is incomplete; <code>false</code> otherwise
	 */
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this competence is pending.
	 *
	 * @return <code>true</code> if this competence is pending; <code>false</code> otherwise
	 */
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this competence is scheduled.
	 *
	 * @return <code>true</code> if this competence is scheduled; <code>false</code> otherwise
	 */
	public boolean isScheduled();

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public Serializable getPrimaryKeyObj();

	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	public Object clone();

	public int compareTo(Competence competence);

	public int hashCode();

	public CacheModel<Competence> toCacheModel();

	public Competence toEscapedModel();

	public String toString();

	public String toXmlString();
}