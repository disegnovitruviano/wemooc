/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.lti.model.impl;

import com.liferay.lms.lti.model.LtiItem;
import com.liferay.lms.lti.model.LtiItemModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LtiItem service. Represents a row in the &quot;lti_item&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.lti.model.LtiItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LtiItemImpl}.
 * </p>
 *
 * @author Diego Renedo Delgado
 * @see LtiItemImpl
 * @see com.liferay.lms.lti.model.LtiItem
 * @see com.liferay.lms.lti.model.LtiItemModel
 * @generated
 */
public class LtiItemModelImpl extends BaseModelImpl<LtiItem>
	implements LtiItemModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lti item model instance should use the {@link com.liferay.lms.lti.model.LtiItem} interface instead.
	 */
	public static final String TABLE_NAME = "lti_item";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "ltiItemId", Types.BIGINT },
			{ "actId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "secret", Types.VARCHAR },
			{ "rol", Types.VARCHAR },
			{ "contenType", Types.VARCHAR },
			{ "iframe", Types.BOOLEAN },
			{ "note", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table lti_item (uuid_ VARCHAR(75) null,ltiItemId LONG not null primary key,actId LONG,companyId LONG,groupId LONG,createDate DATE null,userId LONG,name VARCHAR(75) null,description VARCHAR(75) null,url VARCHAR(75) null,secret VARCHAR(75) null,rol VARCHAR(75) null,contenType VARCHAR(75) null,iframe BOOLEAN,note INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table lti_item";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.lti.model.LtiItem"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.lti.model.LtiItem"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.lti.model.LtiItem"),
			true);
	public static long ACTID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.lti.model.LtiItem"));

	public LtiItemModelImpl() {
	}

	public long getPrimaryKey() {
		return _ltiItemId;
	}

	public void setPrimaryKey(long primaryKey) {
		setLtiItemId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_ltiItemId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LtiItem.class;
	}

	public String getModelClassName() {
		return LtiItem.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("ltiItemId", getLtiItemId());
		attributes.put("actId", getActId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createDate", getCreateDate());
		attributes.put("userId", getUserId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("url", getUrl());
		attributes.put("secret", getSecret());
		attributes.put("rol", getRol());
		attributes.put("contenType", getContenType());
		attributes.put("iframe", getIframe());
		attributes.put("note", getNote());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long ltiItemId = (Long)attributes.get("ltiItemId");

		if (ltiItemId != null) {
			setLtiItemId(ltiItemId);
		}

		Long actId = (Long)attributes.get("actId");

		if (actId != null) {
			setActId(actId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String secret = (String)attributes.get("secret");

		if (secret != null) {
			setSecret(secret);
		}

		String rol = (String)attributes.get("rol");

		if (rol != null) {
			setRol(rol);
		}

		String contenType = (String)attributes.get("contenType");

		if (contenType != null) {
			setContenType(contenType);
		}

		Boolean iframe = (Boolean)attributes.get("iframe");

		if (iframe != null) {
			setIframe(iframe);
		}

		Integer note = (Integer)attributes.get("note");

		if (note != null) {
			setNote(note);
		}
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getLtiItemId() {
		return _ltiItemId;
	}

	public void setLtiItemId(long ltiItemId) {
		_ltiItemId = ltiItemId;
	}

	public long getActId() {
		return _actId;
	}

	public void setActId(long actId) {
		_columnBitmask |= ACTID_COLUMN_BITMASK;

		if (!_setOriginalActId) {
			_setOriginalActId = true;

			_originalActId = _actId;
		}

		_actId = actId;
	}

	public long getOriginalActId() {
		return _originalActId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	public void setUrl(String url) {
		_url = url;
	}

	public String getSecret() {
		if (_secret == null) {
			return StringPool.BLANK;
		}
		else {
			return _secret;
		}
	}

	public void setSecret(String secret) {
		_secret = secret;
	}

	public String getRol() {
		if (_rol == null) {
			return StringPool.BLANK;
		}
		else {
			return _rol;
		}
	}

	public void setRol(String rol) {
		_rol = rol;
	}

	public String getContenType() {
		if (_contenType == null) {
			return StringPool.BLANK;
		}
		else {
			return _contenType;
		}
	}

	public void setContenType(String contenType) {
		_contenType = contenType;
	}

	public boolean getIframe() {
		return _iframe;
	}

	public boolean isIframe() {
		return _iframe;
	}

	public void setIframe(boolean iframe) {
		_iframe = iframe;
	}

	public int getNote() {
		return _note;
	}

	public void setNote(int note) {
		_note = note;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LtiItem.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LtiItem toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (LtiItem)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		LtiItemImpl ltiItemImpl = new LtiItemImpl();

		ltiItemImpl.setUuid(getUuid());
		ltiItemImpl.setLtiItemId(getLtiItemId());
		ltiItemImpl.setActId(getActId());
		ltiItemImpl.setCompanyId(getCompanyId());
		ltiItemImpl.setGroupId(getGroupId());
		ltiItemImpl.setCreateDate(getCreateDate());
		ltiItemImpl.setUserId(getUserId());
		ltiItemImpl.setName(getName());
		ltiItemImpl.setDescription(getDescription());
		ltiItemImpl.setUrl(getUrl());
		ltiItemImpl.setSecret(getSecret());
		ltiItemImpl.setRol(getRol());
		ltiItemImpl.setContenType(getContenType());
		ltiItemImpl.setIframe(getIframe());
		ltiItemImpl.setNote(getNote());

		ltiItemImpl.resetOriginalValues();

		return ltiItemImpl;
	}

	public int compareTo(LtiItem ltiItem) {
		long primaryKey = ltiItem.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LtiItem ltiItem = null;

		try {
			ltiItem = (LtiItem)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = ltiItem.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LtiItemModelImpl ltiItemModelImpl = this;

		ltiItemModelImpl._originalUuid = ltiItemModelImpl._uuid;

		ltiItemModelImpl._originalActId = ltiItemModelImpl._actId;

		ltiItemModelImpl._setOriginalActId = false;

		ltiItemModelImpl._originalGroupId = ltiItemModelImpl._groupId;

		ltiItemModelImpl._setOriginalGroupId = false;

		ltiItemModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LtiItem> toCacheModel() {
		LtiItemCacheModel ltiItemCacheModel = new LtiItemCacheModel();

		ltiItemCacheModel.uuid = getUuid();

		String uuid = ltiItemCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ltiItemCacheModel.uuid = null;
		}

		ltiItemCacheModel.ltiItemId = getLtiItemId();

		ltiItemCacheModel.actId = getActId();

		ltiItemCacheModel.companyId = getCompanyId();

		ltiItemCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			ltiItemCacheModel.createDate = createDate.getTime();
		}
		else {
			ltiItemCacheModel.createDate = Long.MIN_VALUE;
		}

		ltiItemCacheModel.userId = getUserId();

		ltiItemCacheModel.name = getName();

		String name = ltiItemCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			ltiItemCacheModel.name = null;
		}

		ltiItemCacheModel.description = getDescription();

		String description = ltiItemCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			ltiItemCacheModel.description = null;
		}

		ltiItemCacheModel.url = getUrl();

		String url = ltiItemCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			ltiItemCacheModel.url = null;
		}

		ltiItemCacheModel.secret = getSecret();

		String secret = ltiItemCacheModel.secret;

		if ((secret != null) && (secret.length() == 0)) {
			ltiItemCacheModel.secret = null;
		}

		ltiItemCacheModel.rol = getRol();

		String rol = ltiItemCacheModel.rol;

		if ((rol != null) && (rol.length() == 0)) {
			ltiItemCacheModel.rol = null;
		}

		ltiItemCacheModel.contenType = getContenType();

		String contenType = ltiItemCacheModel.contenType;

		if ((contenType != null) && (contenType.length() == 0)) {
			ltiItemCacheModel.contenType = null;
		}

		ltiItemCacheModel.iframe = getIframe();

		ltiItemCacheModel.note = getNote();

		return ltiItemCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", ltiItemId=");
		sb.append(getLtiItemId());
		sb.append(", actId=");
		sb.append(getActId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", secret=");
		sb.append(getSecret());
		sb.append(", rol=");
		sb.append(getRol());
		sb.append(", contenType=");
		sb.append(getContenType());
		sb.append(", iframe=");
		sb.append(getIframe());
		sb.append(", note=");
		sb.append(getNote());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.lti.model.LtiItem");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ltiItemId</column-name><column-value><![CDATA[");
		sb.append(getLtiItemId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actId</column-name><column-value><![CDATA[");
		sb.append(getActId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>secret</column-name><column-value><![CDATA[");
		sb.append(getSecret());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rol</column-name><column-value><![CDATA[");
		sb.append(getRol());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>contenType</column-name><column-value><![CDATA[");
		sb.append(getContenType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>iframe</column-name><column-value><![CDATA[");
		sb.append(getIframe());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LtiItem.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			LtiItem.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _ltiItemId;
	private long _actId;
	private long _originalActId;
	private boolean _setOriginalActId;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private Date _createDate;
	private long _userId;
	private String _userUuid;
	private String _name;
	private String _description;
	private String _url;
	private String _secret;
	private String _rol;
	private String _contenType;
	private boolean _iframe;
	private int _note;
	private long _columnBitmask;
	private LtiItem _escapedModelProxy;
}