/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lmssa.model.impl;

import com.liferay.lmssa.model.LearningActivityTryDeleted;
import com.liferay.lmssa.model.LearningActivityTryDeletedModel;
import com.liferay.lmssa.model.LearningActivityTryDeletedSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LearningActivityTryDeleted service. Represents a row in the &quot;lmssa_LearningActivityTryDeleted&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lmssa.model.LearningActivityTryDeletedModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LearningActivityTryDeletedImpl}.
 * </p>
 *
 * @author TLS
 * @see LearningActivityTryDeletedImpl
 * @see com.liferay.lmssa.model.LearningActivityTryDeleted
 * @see com.liferay.lmssa.model.LearningActivityTryDeletedModel
 * @generated
 */
@JSON(strict = true)
public class LearningActivityTryDeletedModelImpl extends BaseModelImpl<LearningActivityTryDeleted>
	implements LearningActivityTryDeletedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a learning activity try deleted model instance should use the {@link com.liferay.lmssa.model.LearningActivityTryDeleted} interface instead.
	 */
	public static final String TABLE_NAME = "lmssa_LearningActivityTryDeleted";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "latDelId", Types.BIGINT },
			{ "actManAuditId", Types.BIGINT },
			{ "latId", Types.BIGINT },
			{ "actId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "result", Types.BIGINT },
			{ "endDate", Types.TIMESTAMP },
			{ "tryData", Types.VARCHAR },
			{ "tryResultData", Types.VARCHAR },
			{ "comments", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table lmssa_LearningActivityTryDeleted (uuid_ VARCHAR(75) null,latDelId LONG not null primary key,actManAuditId LONG,latId LONG,actId LONG,userId LONG,startDate DATE null,result LONG,endDate DATE null,tryData VARCHAR(75) null,tryResultData VARCHAR(75) null,comments VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table lmssa_LearningActivityTryDeleted";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lmssa.model.LearningActivityTryDeleted"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lmssa.model.LearningActivityTryDeleted"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lmssa.model.LearningActivityTryDeleted"),
			true);
	public static long ACTMANAUDITID_COLUMN_BITMASK = 1L;
	public static long UUID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LearningActivityTryDeleted toModel(
		LearningActivityTryDeletedSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LearningActivityTryDeleted model = new LearningActivityTryDeletedImpl();

		model.setUuid(soapModel.getUuid());
		model.setLatDelId(soapModel.getLatDelId());
		model.setActManAuditId(soapModel.getActManAuditId());
		model.setLatId(soapModel.getLatId());
		model.setActId(soapModel.getActId());
		model.setUserId(soapModel.getUserId());
		model.setStartDate(soapModel.getStartDate());
		model.setResult(soapModel.getResult());
		model.setEndDate(soapModel.getEndDate());
		model.setTryData(soapModel.getTryData());
		model.setTryResultData(soapModel.getTryResultData());
		model.setComments(soapModel.getComments());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LearningActivityTryDeleted> toModels(
		LearningActivityTryDeletedSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LearningActivityTryDeleted> models = new ArrayList<LearningActivityTryDeleted>(soapModels.length);

		for (LearningActivityTryDeletedSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lmssa.model.LearningActivityTryDeleted"));

	public LearningActivityTryDeletedModelImpl() {
	}

	public long getPrimaryKey() {
		return _latDelId;
	}

	public void setPrimaryKey(long primaryKey) {
		setLatDelId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_latDelId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LearningActivityTryDeleted.class;
	}

	public String getModelClassName() {
		return LearningActivityTryDeleted.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("latDelId", getLatDelId());
		attributes.put("actManAuditId", getActManAuditId());
		attributes.put("latId", getLatId());
		attributes.put("actId", getActId());
		attributes.put("userId", getUserId());
		attributes.put("startDate", getStartDate());
		attributes.put("result", getResult());
		attributes.put("endDate", getEndDate());
		attributes.put("tryData", getTryData());
		attributes.put("tryResultData", getTryResultData());
		attributes.put("comments", getComments());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long latDelId = (Long)attributes.get("latDelId");

		if (latDelId != null) {
			setLatDelId(latDelId);
		}

		Long actManAuditId = (Long)attributes.get("actManAuditId");

		if (actManAuditId != null) {
			setActManAuditId(actManAuditId);
		}

		Long latId = (Long)attributes.get("latId");

		if (latId != null) {
			setLatId(latId);
		}

		Long actId = (Long)attributes.get("actId");

		if (actId != null) {
			setActId(actId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Long result = (Long)attributes.get("result");

		if (result != null) {
			setResult(result);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String tryData = (String)attributes.get("tryData");

		if (tryData != null) {
			setTryData(tryData);
		}

		String tryResultData = (String)attributes.get("tryResultData");

		if (tryResultData != null) {
			setTryResultData(tryResultData);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getLatDelId() {
		return _latDelId;
	}

	public void setLatDelId(long latDelId) {
		_latDelId = latDelId;
	}

	@JSON
	public long getActManAuditId() {
		return _actManAuditId;
	}

	public void setActManAuditId(long actManAuditId) {
		_columnBitmask |= ACTMANAUDITID_COLUMN_BITMASK;

		if (!_setOriginalActManAuditId) {
			_setOriginalActManAuditId = true;

			_originalActManAuditId = _actManAuditId;
		}

		_actManAuditId = actManAuditId;
	}

	public long getOriginalActManAuditId() {
		return _originalActManAuditId;
	}

	@JSON
	public long getLatId() {
		return _latId;
	}

	public void setLatId(long latId) {
		_latId = latId;
	}

	@JSON
	public long getActId() {
		return _actId;
	}

	public void setActId(long actId) {
		_actId = actId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getStartDate() {
		return _startDate;
	}

	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	public long getResult() {
		return _result;
	}

	public void setResult(long result) {
		_result = result;
	}

	@JSON
	public Date getEndDate() {
		return _endDate;
	}

	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	public String getTryData() {
		if (_tryData == null) {
			return StringPool.BLANK;
		}
		else {
			return _tryData;
		}
	}

	public void setTryData(String tryData) {
		_tryData = tryData;
	}

	@JSON
	public String getTryResultData() {
		if (_tryResultData == null) {
			return StringPool.BLANK;
		}
		else {
			return _tryResultData;
		}
	}

	public void setTryResultData(String tryResultData) {
		_tryResultData = tryResultData;
	}

	@JSON
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	public void setComments(String comments) {
		_comments = comments;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LearningActivityTryDeleted.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LearningActivityTryDeleted toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (LearningActivityTryDeleted)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		LearningActivityTryDeletedImpl learningActivityTryDeletedImpl = new LearningActivityTryDeletedImpl();

		learningActivityTryDeletedImpl.setUuid(getUuid());
		learningActivityTryDeletedImpl.setLatDelId(getLatDelId());
		learningActivityTryDeletedImpl.setActManAuditId(getActManAuditId());
		learningActivityTryDeletedImpl.setLatId(getLatId());
		learningActivityTryDeletedImpl.setActId(getActId());
		learningActivityTryDeletedImpl.setUserId(getUserId());
		learningActivityTryDeletedImpl.setStartDate(getStartDate());
		learningActivityTryDeletedImpl.setResult(getResult());
		learningActivityTryDeletedImpl.setEndDate(getEndDate());
		learningActivityTryDeletedImpl.setTryData(getTryData());
		learningActivityTryDeletedImpl.setTryResultData(getTryResultData());
		learningActivityTryDeletedImpl.setComments(getComments());

		learningActivityTryDeletedImpl.resetOriginalValues();

		return learningActivityTryDeletedImpl;
	}

	public int compareTo(LearningActivityTryDeleted learningActivityTryDeleted) {
		long primaryKey = learningActivityTryDeleted.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LearningActivityTryDeleted learningActivityTryDeleted = null;

		try {
			learningActivityTryDeleted = (LearningActivityTryDeleted)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = learningActivityTryDeleted.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LearningActivityTryDeletedModelImpl learningActivityTryDeletedModelImpl = this;

		learningActivityTryDeletedModelImpl._originalUuid = learningActivityTryDeletedModelImpl._uuid;

		learningActivityTryDeletedModelImpl._originalActManAuditId = learningActivityTryDeletedModelImpl._actManAuditId;

		learningActivityTryDeletedModelImpl._setOriginalActManAuditId = false;

		learningActivityTryDeletedModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LearningActivityTryDeleted> toCacheModel() {
		LearningActivityTryDeletedCacheModel learningActivityTryDeletedCacheModel =
			new LearningActivityTryDeletedCacheModel();

		learningActivityTryDeletedCacheModel.uuid = getUuid();

		String uuid = learningActivityTryDeletedCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			learningActivityTryDeletedCacheModel.uuid = null;
		}

		learningActivityTryDeletedCacheModel.latDelId = getLatDelId();

		learningActivityTryDeletedCacheModel.actManAuditId = getActManAuditId();

		learningActivityTryDeletedCacheModel.latId = getLatId();

		learningActivityTryDeletedCacheModel.actId = getActId();

		learningActivityTryDeletedCacheModel.userId = getUserId();

		Date startDate = getStartDate();

		if (startDate != null) {
			learningActivityTryDeletedCacheModel.startDate = startDate.getTime();
		}
		else {
			learningActivityTryDeletedCacheModel.startDate = Long.MIN_VALUE;
		}

		learningActivityTryDeletedCacheModel.result = getResult();

		Date endDate = getEndDate();

		if (endDate != null) {
			learningActivityTryDeletedCacheModel.endDate = endDate.getTime();
		}
		else {
			learningActivityTryDeletedCacheModel.endDate = Long.MIN_VALUE;
		}

		learningActivityTryDeletedCacheModel.tryData = getTryData();

		String tryData = learningActivityTryDeletedCacheModel.tryData;

		if ((tryData != null) && (tryData.length() == 0)) {
			learningActivityTryDeletedCacheModel.tryData = null;
		}

		learningActivityTryDeletedCacheModel.tryResultData = getTryResultData();

		String tryResultData = learningActivityTryDeletedCacheModel.tryResultData;

		if ((tryResultData != null) && (tryResultData.length() == 0)) {
			learningActivityTryDeletedCacheModel.tryResultData = null;
		}

		learningActivityTryDeletedCacheModel.comments = getComments();

		String comments = learningActivityTryDeletedCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			learningActivityTryDeletedCacheModel.comments = null;
		}

		return learningActivityTryDeletedCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", latDelId=");
		sb.append(getLatDelId());
		sb.append(", actManAuditId=");
		sb.append(getActManAuditId());
		sb.append(", latId=");
		sb.append(getLatId());
		sb.append(", actId=");
		sb.append(getActId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", result=");
		sb.append(getResult());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", tryData=");
		sb.append(getTryData());
		sb.append(", tryResultData=");
		sb.append(getTryResultData());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lmssa.model.LearningActivityTryDeleted");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latDelId</column-name><column-value><![CDATA[");
		sb.append(getLatDelId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actManAuditId</column-name><column-value><![CDATA[");
		sb.append(getActManAuditId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latId</column-name><column-value><![CDATA[");
		sb.append(getLatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actId</column-name><column-value><![CDATA[");
		sb.append(getActId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>result</column-name><column-value><![CDATA[");
		sb.append(getResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tryData</column-name><column-value><![CDATA[");
		sb.append(getTryData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tryResultData</column-name><column-value><![CDATA[");
		sb.append(getTryResultData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LearningActivityTryDeleted.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			LearningActivityTryDeleted.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _latDelId;
	private long _actManAuditId;
	private long _originalActManAuditId;
	private boolean _setOriginalActManAuditId;
	private long _latId;
	private long _actId;
	private long _userId;
	private String _userUuid;
	private Date _startDate;
	private long _result;
	private Date _endDate;
	private String _tryData;
	private String _tryResultData;
	private String _comments;
	private long _columnBitmask;
	private LearningActivityTryDeleted _escapedModelProxy;
}