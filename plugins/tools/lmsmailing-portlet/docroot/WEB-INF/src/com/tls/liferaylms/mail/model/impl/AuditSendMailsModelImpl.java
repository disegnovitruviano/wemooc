/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tls.liferaylms.mail.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.tls.liferaylms.mail.model.AuditSendMails;
import com.tls.liferaylms.mail.model.AuditSendMailsModel;
import com.tls.liferaylms.mail.model.AuditSendMailsSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the AuditSendMails service. Represents a row in the &quot;lmsmail_AuditSendMails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.tls.liferaylms.mail.model.AuditSendMailsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AuditSendMailsImpl}.
 * </p>
 *
 * @author je03042
 * @see AuditSendMailsImpl
 * @see com.tls.liferaylms.mail.model.AuditSendMails
 * @see com.tls.liferaylms.mail.model.AuditSendMailsModel
 * @generated
 */
@JSON(strict = true)
public class AuditSendMailsModelImpl extends BaseModelImpl<AuditSendMails>
	implements AuditSendMailsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a audit send mails model instance should use the {@link com.tls.liferaylms.mail.model.AuditSendMails} interface instead.
	 */
	public static final String TABLE_NAME = "lmsmail_AuditSendMails";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "auditSendMailsId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "templateId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "sendDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table lmsmail_AuditSendMails (uuid_ VARCHAR(75) null,auditSendMailsId LONG not null primary key,userId LONG,templateId LONG,groupId LONG,sendDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table lmsmail_AuditSendMails";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.tls.liferaylms.mail.model.AuditSendMails"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.tls.liferaylms.mail.model.AuditSendMails"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.tls.liferaylms.mail.model.AuditSendMails"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long UUID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static AuditSendMails toModel(AuditSendMailsSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		AuditSendMails model = new AuditSendMailsImpl();

		model.setUuid(soapModel.getUuid());
		model.setAuditSendMailsId(soapModel.getAuditSendMailsId());
		model.setUserId(soapModel.getUserId());
		model.setTemplateId(soapModel.getTemplateId());
		model.setGroupId(soapModel.getGroupId());
		model.setSendDate(soapModel.getSendDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<AuditSendMails> toModels(AuditSendMailsSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<AuditSendMails> models = new ArrayList<AuditSendMails>(soapModels.length);

		for (AuditSendMailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.tls.liferaylms.mail.model.AuditSendMails"));

	public AuditSendMailsModelImpl() {
	}

	public long getPrimaryKey() {
		return _auditSendMailsId;
	}

	public void setPrimaryKey(long primaryKey) {
		setAuditSendMailsId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_auditSendMailsId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return AuditSendMails.class;
	}

	public String getModelClassName() {
		return AuditSendMails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("auditSendMailsId", getAuditSendMailsId());
		attributes.put("userId", getUserId());
		attributes.put("templateId", getTemplateId());
		attributes.put("groupId", getGroupId());
		attributes.put("sendDate", getSendDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long auditSendMailsId = (Long)attributes.get("auditSendMailsId");

		if (auditSendMailsId != null) {
			setAuditSendMailsId(auditSendMailsId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long templateId = (Long)attributes.get("templateId");

		if (templateId != null) {
			setTemplateId(templateId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date sendDate = (Date)attributes.get("sendDate");

		if (sendDate != null) {
			setSendDate(sendDate);
		}
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getAuditSendMailsId() {
		return _auditSendMailsId;
	}

	public void setAuditSendMailsId(long auditSendMailsId) {
		_auditSendMailsId = auditSendMailsId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public long getTemplateId() {
		return _templateId;
	}

	public void setTemplateId(long templateId) {
		_templateId = templateId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public Date getSendDate() {
		return _sendDate;
	}

	public void setSendDate(Date sendDate) {
		_sendDate = sendDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AuditSendMails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AuditSendMails toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (AuditSendMails)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		AuditSendMailsImpl auditSendMailsImpl = new AuditSendMailsImpl();

		auditSendMailsImpl.setUuid(getUuid());
		auditSendMailsImpl.setAuditSendMailsId(getAuditSendMailsId());
		auditSendMailsImpl.setUserId(getUserId());
		auditSendMailsImpl.setTemplateId(getTemplateId());
		auditSendMailsImpl.setGroupId(getGroupId());
		auditSendMailsImpl.setSendDate(getSendDate());

		auditSendMailsImpl.resetOriginalValues();

		return auditSendMailsImpl;
	}

	public int compareTo(AuditSendMails auditSendMails) {
		long primaryKey = auditSendMails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		AuditSendMails auditSendMails = null;

		try {
			auditSendMails = (AuditSendMails)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = auditSendMails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		AuditSendMailsModelImpl auditSendMailsModelImpl = this;

		auditSendMailsModelImpl._originalUuid = auditSendMailsModelImpl._uuid;

		auditSendMailsModelImpl._originalGroupId = auditSendMailsModelImpl._groupId;

		auditSendMailsModelImpl._setOriginalGroupId = false;

		auditSendMailsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AuditSendMails> toCacheModel() {
		AuditSendMailsCacheModel auditSendMailsCacheModel = new AuditSendMailsCacheModel();

		auditSendMailsCacheModel.uuid = getUuid();

		String uuid = auditSendMailsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			auditSendMailsCacheModel.uuid = null;
		}

		auditSendMailsCacheModel.auditSendMailsId = getAuditSendMailsId();

		auditSendMailsCacheModel.userId = getUserId();

		auditSendMailsCacheModel.templateId = getTemplateId();

		auditSendMailsCacheModel.groupId = getGroupId();

		Date sendDate = getSendDate();

		if (sendDate != null) {
			auditSendMailsCacheModel.sendDate = sendDate.getTime();
		}
		else {
			auditSendMailsCacheModel.sendDate = Long.MIN_VALUE;
		}

		return auditSendMailsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", auditSendMailsId=");
		sb.append(getAuditSendMailsId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", templateId=");
		sb.append(getTemplateId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", sendDate=");
		sb.append(getSendDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.tls.liferaylms.mail.model.AuditSendMails");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>auditSendMailsId</column-name><column-value><![CDATA[");
		sb.append(getAuditSendMailsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateId</column-name><column-value><![CDATA[");
		sb.append(getTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendDate</column-name><column-value><![CDATA[");
		sb.append(getSendDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = AuditSendMails.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			AuditSendMails.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _auditSendMailsId;
	private long _userId;
	private String _userUuid;
	private long _templateId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private Date _sendDate;
	private long _columnBitmask;
	private AuditSendMails _escapedModelProxy;
}