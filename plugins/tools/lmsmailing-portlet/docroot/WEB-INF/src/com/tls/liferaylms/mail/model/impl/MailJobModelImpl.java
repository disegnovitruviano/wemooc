/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tls.liferaylms.mail.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.tls.liferaylms.mail.model.MailJob;
import com.tls.liferaylms.mail.model.MailJobModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the MailJob service. Represents a row in the &quot;lmsmail_MailJob&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.tls.liferaylms.mail.model.MailJobModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MailJobImpl}.
 * </p>
 *
 * @author je03042
 * @see MailJobImpl
 * @see com.tls.liferaylms.mail.model.MailJob
 * @see com.tls.liferaylms.mail.model.MailJobModel
 * @generated
 */
public class MailJobModelImpl extends BaseModelImpl<MailJob>
	implements MailJobModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mail job model instance should use the {@link com.tls.liferaylms.mail.model.MailJob} interface instead.
	 */
	public static final String TABLE_NAME = "lmsmail_MailJob";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "idJob", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "idTemplate", Types.BIGINT },
			{ "conditionClassName", Types.VARCHAR },
			{ "conditionClassPK", Types.BIGINT },
			{ "conditionStatus", Types.VARCHAR },
			{ "dateClassName", Types.VARCHAR },
			{ "dateClassPK", Types.BIGINT },
			{ "dateReferenceDate", Types.BIGINT },
			{ "dateShift", Types.BIGINT },
			{ "teamId", Types.BIGINT },
			{ "processed", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table lmsmail_MailJob (uuid_ VARCHAR(75) null,idJob LONG not null primary key,companyId LONG,groupId LONG,userId LONG,idTemplate LONG,conditionClassName VARCHAR(75) null,conditionClassPK LONG,conditionStatus VARCHAR(75) null,dateClassName VARCHAR(75) null,dateClassPK LONG,dateReferenceDate LONG,dateShift LONG,teamId LONG,processed BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table lmsmail_MailJob";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.tls.liferaylms.mail.model.MailJob"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.tls.liferaylms.mail.model.MailJob"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.tls.liferaylms.mail.model.MailJob"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long PROCESSED_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static long UUID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.tls.liferaylms.mail.model.MailJob"));

	public MailJobModelImpl() {
	}

	public long getPrimaryKey() {
		return _idJob;
	}

	public void setPrimaryKey(long primaryKey) {
		setIdJob(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_idJob);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return MailJob.class;
	}

	public String getModelClassName() {
		return MailJob.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("idJob", getIdJob());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("idTemplate", getIdTemplate());
		attributes.put("conditionClassName", getConditionClassName());
		attributes.put("conditionClassPK", getConditionClassPK());
		attributes.put("conditionStatus", getConditionStatus());
		attributes.put("dateClassName", getDateClassName());
		attributes.put("dateClassPK", getDateClassPK());
		attributes.put("dateReferenceDate", getDateReferenceDate());
		attributes.put("dateShift", getDateShift());
		attributes.put("teamId", getTeamId());
		attributes.put("processed", getProcessed());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long idJob = (Long)attributes.get("idJob");

		if (idJob != null) {
			setIdJob(idJob);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long idTemplate = (Long)attributes.get("idTemplate");

		if (idTemplate != null) {
			setIdTemplate(idTemplate);
		}

		String conditionClassName = (String)attributes.get("conditionClassName");

		if (conditionClassName != null) {
			setConditionClassName(conditionClassName);
		}

		Long conditionClassPK = (Long)attributes.get("conditionClassPK");

		if (conditionClassPK != null) {
			setConditionClassPK(conditionClassPK);
		}

		String conditionStatus = (String)attributes.get("conditionStatus");

		if (conditionStatus != null) {
			setConditionStatus(conditionStatus);
		}

		String dateClassName = (String)attributes.get("dateClassName");

		if (dateClassName != null) {
			setDateClassName(dateClassName);
		}

		Long dateClassPK = (Long)attributes.get("dateClassPK");

		if (dateClassPK != null) {
			setDateClassPK(dateClassPK);
		}

		Long dateReferenceDate = (Long)attributes.get("dateReferenceDate");

		if (dateReferenceDate != null) {
			setDateReferenceDate(dateReferenceDate);
		}

		Long dateShift = (Long)attributes.get("dateShift");

		if (dateShift != null) {
			setDateShift(dateShift);
		}

		Long teamId = (Long)attributes.get("teamId");

		if (teamId != null) {
			setTeamId(teamId);
		}

		Boolean processed = (Boolean)attributes.get("processed");

		if (processed != null) {
			setProcessed(processed);
		}
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getIdJob() {
		return _idJob;
	}

	public void setIdJob(long idJob) {
		_idJob = idJob;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public long getIdTemplate() {
		return _idTemplate;
	}

	public void setIdTemplate(long idTemplate) {
		_idTemplate = idTemplate;
	}

	public String getConditionClassName() {
		if (_conditionClassName == null) {
			return StringPool.BLANK;
		}
		else {
			return _conditionClassName;
		}
	}

	public void setConditionClassName(String conditionClassName) {
		_conditionClassName = conditionClassName;
	}

	public long getConditionClassPK() {
		return _conditionClassPK;
	}

	public void setConditionClassPK(long conditionClassPK) {
		_conditionClassPK = conditionClassPK;
	}

	public String getConditionStatus() {
		if (_conditionStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _conditionStatus;
		}
	}

	public void setConditionStatus(String conditionStatus) {
		_conditionStatus = conditionStatus;
	}

	public String getDateClassName() {
		if (_dateClassName == null) {
			return StringPool.BLANK;
		}
		else {
			return _dateClassName;
		}
	}

	public void setDateClassName(String dateClassName) {
		_dateClassName = dateClassName;
	}

	public long getDateClassPK() {
		return _dateClassPK;
	}

	public void setDateClassPK(long dateClassPK) {
		_dateClassPK = dateClassPK;
	}

	public long getDateReferenceDate() {
		return _dateReferenceDate;
	}

	public void setDateReferenceDate(long dateReferenceDate) {
		_dateReferenceDate = dateReferenceDate;
	}

	public long getDateShift() {
		return _dateShift;
	}

	public void setDateShift(long dateShift) {
		_dateShift = dateShift;
	}

	public long getTeamId() {
		return _teamId;
	}

	public void setTeamId(long teamId) {
		_teamId = teamId;
	}

	public boolean getProcessed() {
		return _processed;
	}

	public boolean isProcessed() {
		return _processed;
	}

	public void setProcessed(boolean processed) {
		_columnBitmask |= PROCESSED_COLUMN_BITMASK;

		if (!_setOriginalProcessed) {
			_setOriginalProcessed = true;

			_originalProcessed = _processed;
		}

		_processed = processed;
	}

	public boolean getOriginalProcessed() {
		return _originalProcessed;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MailJob.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MailJob toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (MailJob)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		MailJobImpl mailJobImpl = new MailJobImpl();

		mailJobImpl.setUuid(getUuid());
		mailJobImpl.setIdJob(getIdJob());
		mailJobImpl.setCompanyId(getCompanyId());
		mailJobImpl.setGroupId(getGroupId());
		mailJobImpl.setUserId(getUserId());
		mailJobImpl.setIdTemplate(getIdTemplate());
		mailJobImpl.setConditionClassName(getConditionClassName());
		mailJobImpl.setConditionClassPK(getConditionClassPK());
		mailJobImpl.setConditionStatus(getConditionStatus());
		mailJobImpl.setDateClassName(getDateClassName());
		mailJobImpl.setDateClassPK(getDateClassPK());
		mailJobImpl.setDateReferenceDate(getDateReferenceDate());
		mailJobImpl.setDateShift(getDateShift());
		mailJobImpl.setTeamId(getTeamId());
		mailJobImpl.setProcessed(getProcessed());

		mailJobImpl.resetOriginalValues();

		return mailJobImpl;
	}

	public int compareTo(MailJob mailJob) {
		long primaryKey = mailJob.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		MailJob mailJob = null;

		try {
			mailJob = (MailJob)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = mailJob.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MailJobModelImpl mailJobModelImpl = this;

		mailJobModelImpl._originalUuid = mailJobModelImpl._uuid;

		mailJobModelImpl._originalCompanyId = mailJobModelImpl._companyId;

		mailJobModelImpl._setOriginalCompanyId = false;

		mailJobModelImpl._originalGroupId = mailJobModelImpl._groupId;

		mailJobModelImpl._setOriginalGroupId = false;

		mailJobModelImpl._originalUserId = mailJobModelImpl._userId;

		mailJobModelImpl._setOriginalUserId = false;

		mailJobModelImpl._originalProcessed = mailJobModelImpl._processed;

		mailJobModelImpl._setOriginalProcessed = false;

		mailJobModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MailJob> toCacheModel() {
		MailJobCacheModel mailJobCacheModel = new MailJobCacheModel();

		mailJobCacheModel.uuid = getUuid();

		String uuid = mailJobCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			mailJobCacheModel.uuid = null;
		}

		mailJobCacheModel.idJob = getIdJob();

		mailJobCacheModel.companyId = getCompanyId();

		mailJobCacheModel.groupId = getGroupId();

		mailJobCacheModel.userId = getUserId();

		mailJobCacheModel.idTemplate = getIdTemplate();

		mailJobCacheModel.conditionClassName = getConditionClassName();

		String conditionClassName = mailJobCacheModel.conditionClassName;

		if ((conditionClassName != null) && (conditionClassName.length() == 0)) {
			mailJobCacheModel.conditionClassName = null;
		}

		mailJobCacheModel.conditionClassPK = getConditionClassPK();

		mailJobCacheModel.conditionStatus = getConditionStatus();

		String conditionStatus = mailJobCacheModel.conditionStatus;

		if ((conditionStatus != null) && (conditionStatus.length() == 0)) {
			mailJobCacheModel.conditionStatus = null;
		}

		mailJobCacheModel.dateClassName = getDateClassName();

		String dateClassName = mailJobCacheModel.dateClassName;

		if ((dateClassName != null) && (dateClassName.length() == 0)) {
			mailJobCacheModel.dateClassName = null;
		}

		mailJobCacheModel.dateClassPK = getDateClassPK();

		mailJobCacheModel.dateReferenceDate = getDateReferenceDate();

		mailJobCacheModel.dateShift = getDateShift();

		mailJobCacheModel.teamId = getTeamId();

		mailJobCacheModel.processed = getProcessed();

		return mailJobCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", idJob=");
		sb.append(getIdJob());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", idTemplate=");
		sb.append(getIdTemplate());
		sb.append(", conditionClassName=");
		sb.append(getConditionClassName());
		sb.append(", conditionClassPK=");
		sb.append(getConditionClassPK());
		sb.append(", conditionStatus=");
		sb.append(getConditionStatus());
		sb.append(", dateClassName=");
		sb.append(getDateClassName());
		sb.append(", dateClassPK=");
		sb.append(getDateClassPK());
		sb.append(", dateReferenceDate=");
		sb.append(getDateReferenceDate());
		sb.append(", dateShift=");
		sb.append(getDateShift());
		sb.append(", teamId=");
		sb.append(getTeamId());
		sb.append(", processed=");
		sb.append(getProcessed());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.tls.liferaylms.mail.model.MailJob");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idJob</column-name><column-value><![CDATA[");
		sb.append(getIdJob());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idTemplate</column-name><column-value><![CDATA[");
		sb.append(getIdTemplate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conditionClassName</column-name><column-value><![CDATA[");
		sb.append(getConditionClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conditionClassPK</column-name><column-value><![CDATA[");
		sb.append(getConditionClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>conditionStatus</column-name><column-value><![CDATA[");
		sb.append(getConditionStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateClassName</column-name><column-value><![CDATA[");
		sb.append(getDateClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateClassPK</column-name><column-value><![CDATA[");
		sb.append(getDateClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateReferenceDate</column-name><column-value><![CDATA[");
		sb.append(getDateReferenceDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateShift</column-name><column-value><![CDATA[");
		sb.append(getDateShift());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>teamId</column-name><column-value><![CDATA[");
		sb.append(getTeamId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processed</column-name><column-value><![CDATA[");
		sb.append(getProcessed());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MailJob.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			MailJob.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _idJob;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _idTemplate;
	private String _conditionClassName;
	private long _conditionClassPK;
	private String _conditionStatus;
	private String _dateClassName;
	private long _dateClassPK;
	private long _dateReferenceDate;
	private long _dateShift;
	private long _teamId;
	private boolean _processed;
	private boolean _originalProcessed;
	private boolean _setOriginalProcessed;
	private long _columnBitmask;
	private MailJob _escapedModelProxy;
}