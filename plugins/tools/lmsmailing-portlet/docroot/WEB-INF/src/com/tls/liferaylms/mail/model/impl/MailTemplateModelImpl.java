/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.tls.liferaylms.mail.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.tls.liferaylms.mail.model.MailTemplate;
import com.tls.liferaylms.mail.model.MailTemplateModel;
import com.tls.liferaylms.mail.model.MailTemplateSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MailTemplate service. Represents a row in the &quot;lmsmail_MailTemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.tls.liferaylms.mail.model.MailTemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MailTemplateImpl}.
 * </p>
 *
 * @author je03042
 * @see MailTemplateImpl
 * @see com.tls.liferaylms.mail.model.MailTemplate
 * @see com.tls.liferaylms.mail.model.MailTemplateModel
 * @generated
 */
@JSON(strict = true)
public class MailTemplateModelImpl extends BaseModelImpl<MailTemplate>
	implements MailTemplateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mail template model instance should use the {@link com.tls.liferaylms.mail.model.MailTemplate} interface instead.
	 */
	public static final String TABLE_NAME = "lmsmail_MailTemplate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "idTemplate", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "subject", Types.VARCHAR },
			{ "body", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table lmsmail_MailTemplate (uuid_ VARCHAR(75) null,idTemplate LONG not null primary key,companyId LONG,groupId LONG,userId LONG,subject VARCHAR(120) null,body TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table lmsmail_MailTemplate";
	public static final String ORDER_BY_JPQL = " ORDER BY mailTemplate.subject ASC";
	public static final String ORDER_BY_SQL = " ORDER BY lmsmail_MailTemplate.subject ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.tls.liferaylms.mail.model.MailTemplate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.tls.liferaylms.mail.model.MailTemplate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.tls.liferaylms.mail.model.MailTemplate"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MailTemplate toModel(MailTemplateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MailTemplate model = new MailTemplateImpl();

		model.setUuid(soapModel.getUuid());
		model.setIdTemplate(soapModel.getIdTemplate());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setSubject(soapModel.getSubject());
		model.setBody(soapModel.getBody());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MailTemplate> toModels(MailTemplateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MailTemplate> models = new ArrayList<MailTemplate>(soapModels.length);

		for (MailTemplateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.tls.liferaylms.mail.model.MailTemplate"));

	public MailTemplateModelImpl() {
	}

	public long getPrimaryKey() {
		return _idTemplate;
	}

	public void setPrimaryKey(long primaryKey) {
		setIdTemplate(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_idTemplate);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return MailTemplate.class;
	}

	public String getModelClassName() {
		return MailTemplate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("idTemplate", getIdTemplate());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("subject", getSubject());
		attributes.put("body", getBody());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long idTemplate = (Long)attributes.get("idTemplate");

		if (idTemplate != null) {
			setIdTemplate(idTemplate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String body = (String)attributes.get("body");

		if (body != null) {
			setBody(body);
		}
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getIdTemplate() {
		return _idTemplate;
	}

	public void setIdTemplate(long idTemplate) {
		_idTemplate = idTemplate;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	public void setSubject(String subject) {
		_columnBitmask = -1L;

		_subject = subject;
	}

	@JSON
	public String getBody() {
		if (_body == null) {
			return StringPool.BLANK;
		}
		else {
			return _body;
		}
	}

	public void setBody(String body) {
		_body = body;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MailTemplate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MailTemplate toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (MailTemplate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		MailTemplateImpl mailTemplateImpl = new MailTemplateImpl();

		mailTemplateImpl.setUuid(getUuid());
		mailTemplateImpl.setIdTemplate(getIdTemplate());
		mailTemplateImpl.setCompanyId(getCompanyId());
		mailTemplateImpl.setGroupId(getGroupId());
		mailTemplateImpl.setUserId(getUserId());
		mailTemplateImpl.setSubject(getSubject());
		mailTemplateImpl.setBody(getBody());

		mailTemplateImpl.resetOriginalValues();

		return mailTemplateImpl;
	}

	public int compareTo(MailTemplate mailTemplate) {
		int value = 0;

		value = getSubject().compareTo(mailTemplate.getSubject());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		MailTemplate mailTemplate = null;

		try {
			mailTemplate = (MailTemplate)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = mailTemplate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		MailTemplateModelImpl mailTemplateModelImpl = this;

		mailTemplateModelImpl._originalUuid = mailTemplateModelImpl._uuid;

		mailTemplateModelImpl._originalCompanyId = mailTemplateModelImpl._companyId;

		mailTemplateModelImpl._setOriginalCompanyId = false;

		mailTemplateModelImpl._originalGroupId = mailTemplateModelImpl._groupId;

		mailTemplateModelImpl._setOriginalGroupId = false;

		mailTemplateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<MailTemplate> toCacheModel() {
		MailTemplateCacheModel mailTemplateCacheModel = new MailTemplateCacheModel();

		mailTemplateCacheModel.uuid = getUuid();

		String uuid = mailTemplateCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			mailTemplateCacheModel.uuid = null;
		}

		mailTemplateCacheModel.idTemplate = getIdTemplate();

		mailTemplateCacheModel.companyId = getCompanyId();

		mailTemplateCacheModel.groupId = getGroupId();

		mailTemplateCacheModel.userId = getUserId();

		mailTemplateCacheModel.subject = getSubject();

		String subject = mailTemplateCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			mailTemplateCacheModel.subject = null;
		}

		mailTemplateCacheModel.body = getBody();

		String body = mailTemplateCacheModel.body;

		if ((body != null) && (body.length() == 0)) {
			mailTemplateCacheModel.body = null;
		}

		return mailTemplateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", idTemplate=");
		sb.append(getIdTemplate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", body=");
		sb.append(getBody());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.tls.liferaylms.mail.model.MailTemplate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idTemplate</column-name><column-value><![CDATA[");
		sb.append(getIdTemplate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>body</column-name><column-value><![CDATA[");
		sb.append(getBody());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MailTemplate.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			MailTemplate.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _idTemplate;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private String _subject;
	private String _body;
	private long _columnBitmask;
	private MailTemplate _escapedModelProxy;
}