/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.LmsPrefs;
import com.liferay.lms.model.LmsPrefsModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LmsPrefs service. Represents a row in the &quot;Lms_LmsPrefs&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.LmsPrefsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LmsPrefsImpl}.
 * </p>
 *
 * @author TLS
 * @see LmsPrefsImpl
 * @see com.liferay.lms.model.LmsPrefs
 * @see com.liferay.lms.model.LmsPrefsModel
 * @generated
 */
public class LmsPrefsModelImpl extends BaseModelImpl<LmsPrefs>
	implements LmsPrefsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lms prefs model instance should use the {@link com.liferay.lms.model.LmsPrefs} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_LmsPrefs";
	public static final Object[][] TABLE_COLUMNS = {
			{ "companyId", Types.BIGINT },
			{ "teacherRole", Types.BIGINT },
			{ "editorRole", Types.BIGINT },
			{ "lmsTemplates", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_LmsPrefs (companyId LONG not null primary key,teacherRole LONG,editorRole LONG,lmsTemplates VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table Lms_LmsPrefs";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.LmsPrefs"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.LmsPrefs"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.LmsPrefs"));

	public LmsPrefsModelImpl() {
	}

	public long getPrimaryKey() {
		return _companyId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCompanyId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_companyId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LmsPrefs.class;
	}

	public String getModelClassName() {
		return LmsPrefs.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("companyId", getCompanyId());
		attributes.put("teacherRole", getTeacherRole());
		attributes.put("editorRole", getEditorRole());
		attributes.put("lmsTemplates", getLmsTemplates());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long teacherRole = (Long)attributes.get("teacherRole");

		if (teacherRole != null) {
			setTeacherRole(teacherRole);
		}

		Long editorRole = (Long)attributes.get("editorRole");

		if (editorRole != null) {
			setEditorRole(editorRole);
		}

		String lmsTemplates = (String)attributes.get("lmsTemplates");

		if (lmsTemplates != null) {
			setLmsTemplates(lmsTemplates);
		}
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getTeacherRole() {
		return _teacherRole;
	}

	public void setTeacherRole(long teacherRole) {
		_teacherRole = teacherRole;
	}

	public long getEditorRole() {
		return _editorRole;
	}

	public void setEditorRole(long editorRole) {
		_editorRole = editorRole;
	}

	public String getLmsTemplates() {
		if (_lmsTemplates == null) {
			return StringPool.BLANK;
		}
		else {
			return _lmsTemplates;
		}
	}

	public void setLmsTemplates(String lmsTemplates) {
		_lmsTemplates = lmsTemplates;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LmsPrefs.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LmsPrefs toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (LmsPrefs)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		LmsPrefsImpl lmsPrefsImpl = new LmsPrefsImpl();

		lmsPrefsImpl.setCompanyId(getCompanyId());
		lmsPrefsImpl.setTeacherRole(getTeacherRole());
		lmsPrefsImpl.setEditorRole(getEditorRole());
		lmsPrefsImpl.setLmsTemplates(getLmsTemplates());

		lmsPrefsImpl.resetOriginalValues();

		return lmsPrefsImpl;
	}

	public int compareTo(LmsPrefs lmsPrefs) {
		long primaryKey = lmsPrefs.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LmsPrefs lmsPrefs = null;

		try {
			lmsPrefs = (LmsPrefs)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = lmsPrefs.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<LmsPrefs> toCacheModel() {
		LmsPrefsCacheModel lmsPrefsCacheModel = new LmsPrefsCacheModel();

		lmsPrefsCacheModel.companyId = getCompanyId();

		lmsPrefsCacheModel.teacherRole = getTeacherRole();

		lmsPrefsCacheModel.editorRole = getEditorRole();

		lmsPrefsCacheModel.lmsTemplates = getLmsTemplates();

		String lmsTemplates = lmsPrefsCacheModel.lmsTemplates;

		if ((lmsTemplates != null) && (lmsTemplates.length() == 0)) {
			lmsPrefsCacheModel.lmsTemplates = null;
		}

		return lmsPrefsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{companyId=");
		sb.append(getCompanyId());
		sb.append(", teacherRole=");
		sb.append(getTeacherRole());
		sb.append(", editorRole=");
		sb.append(getEditorRole());
		sb.append(", lmsTemplates=");
		sb.append(getLmsTemplates());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.LmsPrefs");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>teacherRole</column-name><column-value><![CDATA[");
		sb.append(getTeacherRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>editorRole</column-name><column-value><![CDATA[");
		sb.append(getEditorRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lmsTemplates</column-name><column-value><![CDATA[");
		sb.append(getLmsTemplates());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LmsPrefs.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			LmsPrefs.class
		};
	private long _companyId;
	private long _teacherRole;
	private long _editorRole;
	private String _lmsTemplates;
	private LmsPrefs _escapedModelProxy;
}