/**
 * Copyright (c)2013 Telefonica Learning Services. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.lms.model.impl;

import com.liferay.lms.model.SurveyResult;
import com.liferay.lms.model.SurveyResultModel;
import com.liferay.lms.model.SurveyResultSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SurveyResult service. Represents a row in the &quot;Lms_SurveyResult&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.lms.model.SurveyResultModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SurveyResultImpl}.
 * </p>
 *
 * @author TLS
 * @see SurveyResultImpl
 * @see com.liferay.lms.model.SurveyResult
 * @see com.liferay.lms.model.SurveyResultModel
 * @generated
 */
@JSON(strict = true)
public class SurveyResultModelImpl extends BaseModelImpl<SurveyResult>
	implements SurveyResultModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a survey result model instance should use the {@link com.liferay.lms.model.SurveyResult} interface instead.
	 */
	public static final String TABLE_NAME = "Lms_SurveyResult";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "surveyResultId", Types.BIGINT },
			{ "actId", Types.BIGINT },
			{ "latId", Types.BIGINT },
			{ "questionId", Types.BIGINT },
			{ "answerId", Types.BIGINT },
			{ "userId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Lms_SurveyResult (uuid_ VARCHAR(75) null,surveyResultId LONG not null primary key,actId LONG,latId LONG,questionId LONG,answerId LONG,userId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Lms_SurveyResult";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.lms.model.SurveyResult"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.lms.model.SurveyResult"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.lms.model.SurveyResult"),
			true);
	public static long UUID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SurveyResult toModel(SurveyResultSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SurveyResult model = new SurveyResultImpl();

		model.setUuid(soapModel.getUuid());
		model.setSurveyResultId(soapModel.getSurveyResultId());
		model.setActId(soapModel.getActId());
		model.setLatId(soapModel.getLatId());
		model.setQuestionId(soapModel.getQuestionId());
		model.setAnswerId(soapModel.getAnswerId());
		model.setUserId(soapModel.getUserId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SurveyResult> toModels(SurveyResultSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SurveyResult> models = new ArrayList<SurveyResult>(soapModels.length);

		for (SurveyResultSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.lms.model.SurveyResult"));

	public SurveyResultModelImpl() {
	}

	public long getPrimaryKey() {
		return _surveyResultId;
	}

	public void setPrimaryKey(long primaryKey) {
		setSurveyResultId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_surveyResultId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return SurveyResult.class;
	}

	public String getModelClassName() {
		return SurveyResult.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("surveyResultId", getSurveyResultId());
		attributes.put("actId", getActId());
		attributes.put("latId", getLatId());
		attributes.put("questionId", getQuestionId());
		attributes.put("answerId", getAnswerId());
		attributes.put("userId", getUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long surveyResultId = (Long)attributes.get("surveyResultId");

		if (surveyResultId != null) {
			setSurveyResultId(surveyResultId);
		}

		Long actId = (Long)attributes.get("actId");

		if (actId != null) {
			setActId(actId);
		}

		Long latId = (Long)attributes.get("latId");

		if (latId != null) {
			setLatId(latId);
		}

		Long questionId = (Long)attributes.get("questionId");

		if (questionId != null) {
			setQuestionId(questionId);
		}

		Long answerId = (Long)attributes.get("answerId");

		if (answerId != null) {
			setAnswerId(answerId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getSurveyResultId() {
		return _surveyResultId;
	}

	public void setSurveyResultId(long surveyResultId) {
		_surveyResultId = surveyResultId;
	}

	@JSON
	public long getActId() {
		return _actId;
	}

	public void setActId(long actId) {
		_actId = actId;
	}

	@JSON
	public long getLatId() {
		return _latId;
	}

	public void setLatId(long latId) {
		_latId = latId;
	}

	@JSON
	public long getQuestionId() {
		return _questionId;
	}

	public void setQuestionId(long questionId) {
		_questionId = questionId;
	}

	@JSON
	public long getAnswerId() {
		return _answerId;
	}

	public void setAnswerId(long answerId) {
		_answerId = answerId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SurveyResult.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SurveyResult toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (SurveyResult)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		SurveyResultImpl surveyResultImpl = new SurveyResultImpl();

		surveyResultImpl.setUuid(getUuid());
		surveyResultImpl.setSurveyResultId(getSurveyResultId());
		surveyResultImpl.setActId(getActId());
		surveyResultImpl.setLatId(getLatId());
		surveyResultImpl.setQuestionId(getQuestionId());
		surveyResultImpl.setAnswerId(getAnswerId());
		surveyResultImpl.setUserId(getUserId());

		surveyResultImpl.resetOriginalValues();

		return surveyResultImpl;
	}

	public int compareTo(SurveyResult surveyResult) {
		long primaryKey = surveyResult.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		SurveyResult surveyResult = null;

		try {
			surveyResult = (SurveyResult)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = surveyResult.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SurveyResultModelImpl surveyResultModelImpl = this;

		surveyResultModelImpl._originalUuid = surveyResultModelImpl._uuid;

		surveyResultModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SurveyResult> toCacheModel() {
		SurveyResultCacheModel surveyResultCacheModel = new SurveyResultCacheModel();

		surveyResultCacheModel.uuid = getUuid();

		String uuid = surveyResultCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			surveyResultCacheModel.uuid = null;
		}

		surveyResultCacheModel.surveyResultId = getSurveyResultId();

		surveyResultCacheModel.actId = getActId();

		surveyResultCacheModel.latId = getLatId();

		surveyResultCacheModel.questionId = getQuestionId();

		surveyResultCacheModel.answerId = getAnswerId();

		surveyResultCacheModel.userId = getUserId();

		return surveyResultCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", surveyResultId=");
		sb.append(getSurveyResultId());
		sb.append(", actId=");
		sb.append(getActId());
		sb.append(", latId=");
		sb.append(getLatId());
		sb.append(", questionId=");
		sb.append(getQuestionId());
		sb.append(", answerId=");
		sb.append(getAnswerId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.lms.model.SurveyResult");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>surveyResultId</column-name><column-value><![CDATA[");
		sb.append(getSurveyResultId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actId</column-name><column-value><![CDATA[");
		sb.append(getActId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latId</column-name><column-value><![CDATA[");
		sb.append(getLatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionId</column-name><column-value><![CDATA[");
		sb.append(getQuestionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerId</column-name><column-value><![CDATA[");
		sb.append(getAnswerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SurveyResult.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			SurveyResult.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _surveyResultId;
	private long _actId;
	private long _latId;
	private long _questionId;
	private long _answerId;
	private long _userId;
	private String _userUuid;
	private long _columnBitmask;
	private SurveyResult _escapedModelProxy;
}